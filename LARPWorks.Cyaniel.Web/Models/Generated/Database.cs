
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `MySQL`
//     Provider:               `MySql.Data.MySqlClient`
//     Connection String:      `Server=localhost;Database=larpworks;Uid=larpworks_admin;Pwd=larpworks;`
//     Schema:                 ``
//     Include Views:          `False`


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace MySQL
{
	public partial class LarpworksDatabase : Database
	{
		public LarpworksDatabase() 
			: base("MySQL")
		{
			CommonConstruct();
		}

		public LarpworksDatabase(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			LarpworksDatabase GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static LarpworksDatabase GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new LarpworksDatabase();
        }

		[ThreadStatic] static LarpworksDatabase _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        
		public class Record<T> where T:new()
		{
			public static LarpworksDatabase repo { get { return LarpworksDatabase.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }
			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }
			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
		}
	}
	

    
	[TableName("larpworks.AdvancementListAttributes")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class AdvancementListAttribute : LarpworksDatabase.Record<AdvancementListAttribute>  
    {
		[Column] public int Id { get; set; }
		[Column] public int AdvancementListId { get; set; }
		[Column] public int AttributeId { get; set; }
		[Column] public bool IsStaffOnly { get; set; }
		[Column] public bool IsFreeWithRequirements { get; set; }
	}
    
	[TableName("larpworks.AdvancementListRequirements")]
	[ExplicitColumns]
    public partial class AdvancementListRequirement : LarpworksDatabase.Record<AdvancementListRequirement>  
    {
		[Column] public int AdvancementListAttributeId { get; set; }
		[Column] public int AttributeRequirementId { get; set; }
		[Column] public int RequirementRank { get; set; }
	}
    
	[TableName("larpworks.AdvancementLists")]
	[PrimaryKey("Id", AutoIncrement=false)]
	[ExplicitColumns]
    public partial class AdvancementList : LarpworksDatabase.Record<AdvancementList>  
    {
		[Column] public int Id { get; set; }
		[Column] public string Name { get; set; }
		[Column] public bool IsChargenOnly { get; set; }
		[Column] public bool IsStaffOnly { get; set; }
	}
    
	[TableName("larpworks.AttributeTypes")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class AttributeType : LarpworksDatabase.Record<AttributeType>  
    {
		[Column] public int Id { get; set; }
		[Column] public string Name { get; set; }
	}
    
	[TableName("larpworks.Attributes")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class Attribute : LarpworksDatabase.Record<Attribute>  
    {
		[Column] public int Id { get; set; }
		[Column] public string Name { get; set; }
		[Column] public string Description { get; set; }
		[Column] public int AttributeTypeId { get; set; }
	}
    
	[TableName("larpworks.AwardLogs")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class AwardLog : LarpworksDatabase.Record<AwardLog>  
    {
		[Column] public int Id { get; set; }
		[Column] public int UserId { get; set; }
		[Column] public int? CharacterId { get; set; }
		[Column] public int AwardTypeId { get; set; }
		[Column] public DateTime AwardDate { get; set; }
		[Column] public int Amount { get; set; }
		[Column] public string Reason { get; set; }
	}
    
	[TableName("larpworks.AwardTypes")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class AwardType : LarpworksDatabase.Record<AwardType>  
    {
		[Column] public int Id { get; set; }
		[Column] public string Name { get; set; }
	}
    
	[TableName("larpworks.BucketTickets")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class BucketTicket : LarpworksDatabase.Record<BucketTicket>  
    {
		[Column] public int Id { get; set; }
		[Column] public int BucketId { get; set; }
		[Column] public string Title { get; set; }
		[Column] public int CreatorId { get; set; }
		[Column] public int? AssigneeId { get; set; }
		[Column] public int Status { get; set; }
		[Column] public DateTime CreatedOn { get; set; }
		[Column] public DateTime? LastModified { get; set; }
	}
    
	[TableName("larpworks.Buckets")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class Bucket : LarpworksDatabase.Record<Bucket>  
    {
		[Column] public int Id { get; set; }
		[Column] public string Name { get; set; }
	}
    
	[TableName("larpworks.CharacterAttributes")]
	[ExplicitColumns]
    public partial class CharacterAttribute : LarpworksDatabase.Record<CharacterAttribute>  
    {
		[Column] public int CharacterId { get; set; }
		[Column] public int AttributeId { get; set; }
		[Column] public int Rank { get; set; }
		[Column] public DateTime? LastModified { get; set; }
		[Column] public string Comments { get; set; }
	}
    
	[TableName("larpworks.Characters")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class Character : LarpworksDatabase.Record<Character>  
    {
		[Column] public int Id { get; set; }
		[Column] public string Name { get; set; }
		[Column] public DateTime CreationDate { get; set; }
		[Column] public DateTime? LastUpdate { get; set; }
		[Column] public int UserId { get; set; }
	}
    
	[TableName("larpworks.Roles")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class Role : LarpworksDatabase.Record<Role>  
    {
		[Column] public int Id { get; set; }
		[Column] public string Name { get; set; }
	}
    
	[TableName("larpworks.TicketAccessLists")]
	[ExplicitColumns]
    public partial class TicketAccessList : LarpworksDatabase.Record<TicketAccessList>  
    {
		[Column] public int TicketId { get; set; }
		[Column] public int UserId { get; set; }
		[Column] public bool CanWrite { get; set; }
		[Column] public bool CanRead { get; set; }
	}
    
	[TableName("larpworks.TicketComments")]
	[ExplicitColumns]
    public partial class TicketComment : LarpworksDatabase.Record<TicketComment>  
    {
		[Column] public int TicketId { get; set; }
		[Column] public int AuthorUserId { get; set; }
		[Column] public string Comment { get; set; }
		[Column] public DateTime CreatedOn { get; set; }
	}
    
	[TableName("larpworks.UserRoles")]
	[ExplicitColumns]
    public partial class UserRole : LarpworksDatabase.Record<UserRole>  
    {
		[Column] public int UserId { get; set; }
		[Column] public int RoleId { get; set; }
	}
    
	[TableName("larpworks.Users")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class User : LarpworksDatabase.Record<User>  
    {
		[Column] public int Id { get; set; }
		[Column] public string Email { get; set; }
		[Column] public string Phone { get; set; }
		[Column] public string Username { get; set; }
		[Column] public string FirstName { get; set; }
		[Column] public string LastName { get; set; }
		[Column] public string BirthDate { get; set; }
		[Column] public string JoinDate { get; set; }
		[Column] public string EmergencyContactName { get; set; }
		[Column] public string EmergencyContactNumber { get; set; }
		[Column] public string PasswordHash { get; set; }
	}
}
