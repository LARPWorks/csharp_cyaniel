@using System.Collections.Generic
@using System.Linq
@using LARPWorks.Cyaniel.Features.Characters.Downtime
@using LARPWorks.Cyaniel.Models.Characters
@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<LARPWorks.Cyaniel.Features.Characters.Downtime.DowntimeIndexViewModel>
@{
Layout = "_Layout.cshtml";
}

<div class="content-section">
    <div class="container-fluid">
        <h1>Editing @Model.LeadershipGraph.CharacterName's Downtime Actions</h1>
        <hr/>

        <div class="row">
            <div class="col-md-4 col-md-offset-1">
                <h2>Leadership Graph</h2>
                <div id="mynetwork" style="height: 400px; border: 1px solid lightgray;"></div>
            </div>
            <div class="col-md-6">
                <h2>Leadership Action Allocation</h2>
                @if (Model.LeadershipGraph.Leaders.Count == 0
                     && Model.LeadershipGraph.Children.Count == 0)
                {
                    <div class="row">
                        <div class="col-md-6 col-md-offset-3">
                            <h3>Not In Leadership Tree</h3>
                        </div>
                    </div>
                }
                else
                {
                    <table class="table">
                        <thead style="background-color: black; color: whitesmoke; font-weight: bold;">
                        <!--<th>Name</th>
                        <th>Type</th>
                        <th>Actions allocated</th>
                        <th>Adjust</th>
                        <th>Actions</th>-->
                        <th>ID#</th>
                        <th>Name</th>
                        <th>Assigned By</th>
                        <th>Type</th>
                        <th>Actions</th>
                        </thead>
                        <tbody>
                        @foreach (LeadershipNode node in Model.LeadershipGraph.Leaders.Concat(Model.LeadershipGraph.Children))
                        {
                            IEnumerable<DowntimeAction> actions = Model.Actions.Where(a => a.AssignedToCharacterId == node.CharacterId);

                            <tr class="header" style="background-color: azure">
                                <td colspan="3">
                                    <span class="glyphicon glyphicon-menu-up" name="expand-icon" aria-hidden="true"></span>
                                    @node.CharacterName
                                </td>
                                <td colspan="2">
                                    @if (node.IsRetainer)
                                    {
                                        <text>
                                            Retainer</text>
                                    }
                                    else
                                    {<text>Leader</text>
                                    }
                                    <span style="float: right"><b>@actions.Count()</b> Actions Allocated</span>
                                </td>
                            </tr>
                            foreach (DowntimeAction action in actions)
                            {
                                <tr>
                                    <td>@action.Id</td>
                                    <td>@action.CharacterName</td>
                                    <td>Edward Fitzdrake</td>
                                    @if (action.FromRetainer)
                                    {
                                        <td>Retainer</td>
                                    }
                                    else
                                    {
                                        <td>Constituent</td>
                                    }
                                    <td>
                                        <a href="#"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></a>
                                    </td>
                                </tr>
                            }
                            <!--@if (node.IsRetainer)
                                {
                                    <td>Retainer</td>
                                }
                                else
                                {
                                    <td>Constituent</td>
                                }-->
                            <!--<tr>
                                <td>@node.CharacterName</td>
                                <td>Leader</td>
                                <td>4</td>
                                <td>
                                    <a href="#"><span class="glyphicon glyphicon-plus" aria-hidden="true"></span></a>
                                    <a href="#"><span class="glyphicon glyphicon-minus" aria-hidden="true"></span></a>
                                </td>
                                <td><a href="#"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></a></td>
                            </tr>-->
                        }
                        </tbody>
                    </table>
                }

                <div class="row">
                    <div class="col-md-2">
                        <a class="btn btn-default" href="#" role="button">Add Leader</a>
                    </div>
                    <div class="col-md-8">
                        <div class="btn-group" role="group" aria-label="...">
                            <button disabled type="button" class="btn btn-default">Add Action From</button>
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    Select One
                                    <span class="caret"></span>
                                </button>
                                <ul class="dropdown-menu">
                                    @foreach (DowntimeAction action in Model.Actions)
                                    {
                                        <li><a href="#">@action.CharacterName (ID#@action.Id)</a></li>
                                    }
                                </ul>
                            </div>
                            <button disabled type="button" class="btn btn-default">To</button>
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    Select One
                                    <span class="caret"></span>
                                </button>
                                <ul class="dropdown-menu">
                                    @foreach (LeadershipNode node in Model.LeadershipGraph.Leaders)
                                    {
                                        <li><a href="#">@node.CharacterName</a></li>
                                    }
                                </ul>
                            </div>

                            <button type="button" class="btn btn-default">Submit</button>
                        </div>
                    </div>
                    @{
                        int actionsFree = Model.Actions.Where(a => a.AssignedToCharacterId == 0).Count();
                        <div class="col-md-2">
                            @actionsFree out of @Model.Actions.Count() actions remaining
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-10 col-md-offset-1">
                <h2>Downtime Actions</h2>
            </div>

        </div>
    </div>
</div>


<script type="text/javascript">
    // create an array with nodes
    var nodes = new vis.DataSet([
        { id: @Model.LeadershipGraph.Id, label: '@Model.LeadershipGraph.CharacterName'}
    ]);

    @foreach (LeadershipNode node in Model.LeadershipGraph.Children.Concat(Model.LeadershipGraph.Leaders))
    {
        @:nodes.add({id: @node.Id, label: '@node.CharacterName'});
    }

    //var nodes = new vis.DataSet([
    //    { id: 1, label: 'Node 1' },
    //    { id: 2, label: 'Node 2' },
    //    { id: 3, label: 'Node 3' },
    //    { id: 4, label: 'Node 4' },
    //    { id: 5, label: 'Node 5' },
    //    { id: 6, label: 'Node 6' },
    //    { id: 7, label: 'Node 7' },
    //    { id: 8, label: 'Node 8' }
    //]);

    var edges = new vis.DataSet();
    @foreach (LeadershipNode node in Model.LeadershipGraph.Children)
    {
        @:edges.add({ from: @node.Id, to: @Model.LeadershipGraph.Id, arrows: 'to' });
    }

    @foreach (LeadershipNode node in Model.LeadershipGraph.Leaders)
    {
        @:edges.add({ from: @Model.LeadershipGraph.Id, to: @node.Id, arrows: 'to' });
    }

    // create an array with edges
    //var edges = new vis.DataSet([
    //    { from: 1, to: 8, arrows: 'to', dashes: true },
    //    { from: 1, to: 3, arrows: 'to' },
    //    { from: 1, to: 2, arrows: 'to, from' },
    //    { from: 2, to: 4, arrows: 'to, middle' },
    //    { from: 2, to: 5, arrows: 'to, middle, from' },
    //    { from: 5, to: 6, arrows: { to: { scaleFactor: 2 } } },
    //    { from: 6, to: 7, arrows: { middle: { scaleFactor: 0.5 }, from: true } }
    //]);

    // create a network
    var container = document.getElementById('mynetwork');
    var data = {
        nodes: nodes,
        edges: edges
    };
    var options = {};
    var network = new vis.Network(container, data, options);

    $('.header').click(function () {
        var icon = $(this)[0].getElementsByTagName('td')[0].getElementsByTagName('span')[0];
        //console.log(icon);
        if (icon.classList.contains("glyphicon-menu-down")) {
            icon.classList.remove("glyphicon-menu-down");
            icon.classList.add("glyphicon-menu-up");
        } else {
            icon.classList.remove("glyphicon-menu-up");
            icon.classList.add("glyphicon-menu-down");
        }

        $(this).nextUntil('tr.header').toggle();
    });
</script>